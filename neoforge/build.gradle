plugins {
    id 'com.github.johnrengelman.shadow'
    id 'maven-publish'
    id 'me.modmuss50.mod-publish-plugin'
}

archivesBaseName = archives_name

version = "${mod_version}+mc${minecraft_version}-neoforge"

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    include api("blue.endless:jankson:${jankson_version}")
    forgeDependencies "blue.endless:jankson:${jankson_version}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    atAccessWideners.add "enchantedbooklib.accesswidener"
}

sourcesJar {
    afterEvaluate {
        [":common"].forEach {
            def depSources = project(it).sourcesJar
            dependsOn depSources
            from(depSources.archiveFile.map { zipTree(it) }) {
                exclude "enchantedbooklib.accesswidener"
            }
        }
    }
}

var changelogText = rootProject.file("Changelog.md").text

publishMods {
    file = remapJar.archiveFile
    modLoaders.add("neoforge")
    displayName = "EnchantedBookLib v${project.version}"
    changelog = changelogText

    if (project.release_type == "alpha") {
        type = ALPHA
    } else if (project.release_type == "beta") {
        type = BETA
    } else if (project.release_type == "stable") {
        type = STABLE
    }

    modrinth {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = "36JtkTh1"
        minecraftVersions.add(minecraft_version)

        // Fabric API
        requires {
            id = "P7dR8mSH"
        }
    }

    curseforge {
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        clientRequired = true
        serverRequired = true
        javaVersions.add(JavaVersion.VERSION_21)
        projectId = "1169618"
        minecraftVersions.add(minecraft_version)

        requires("fabric-api")
    }

    github {
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        repository = "Command17/EnchantedBookLib"
        commitish = branch
    }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.

        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Command17/EnchantedBookLib")
            credentials {
                username = "Command17"
                password = System.getenv("GITHUB_PKG_TOKEN")
            }
        }
    }
}